name: Tests & Lint

on:
  pull_request:
  push:
    branches: [main]

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npx eslint src --ext .js,.jsx
        
      - name: Run tests with coverage
        run: |
          npm run test:coverage:cli
          npx vitest run src/__tests__/gameLogic.helpers.test.mts src/__tests__/gameLogic.test.mts src/__tests__/deck.test.mts --coverage
        
      - name: Generate coverage badge data
        if: github.ref == 'refs/heads/main'
        run: |
          # Generate coverage data
          node scripts/extract-coverage.cjs > coverage-data.json
          
          # Extract overall coverage
          OVERALL_COVERAGE=$(node -e "
            try {
              const data = require('./coverage-data.json');
              console.log(data.overall.lines);
            } catch(e) {
              console.log(0);
            }
          ")
          
          # Extract CLI coverage  
          CLI_COVERAGE=$(node -e "
            try {
              const data = require('./coverage-data.json');
              console.log(data.cli.lines);
            } catch(e) {
              console.log(0);
            }
          ")
          
          # Function to determine color based on coverage percentage
          get_color() {
            local coverage=$1
            if [ $coverage -ge 80 ]; then
              echo "brightgreen"
            elif [ $coverage -ge 60 ]; then
              echo "yellow"  
            elif [ $coverage -ge 40 ]; then
              echo "orange"
            else
              echo "red"
            fi
          }
          
          OVERALL_COLOR=$(get_color $OVERALL_COVERAGE)
          CLI_COLOR=$(get_color $CLI_COVERAGE)
          
          # Create JSON for shields.io endpoint
          mkdir -p .github/badges
          echo "{\"schemaVersion\": 1, \"label\": \"coverage\", \"message\": \"${OVERALL_COVERAGE}%\", \"color\": \"${OVERALL_COLOR}\"}" > .github/badges/coverage.json
          echo "{\"schemaVersion\": 1, \"label\": \"CLI coverage\", \"message\": \"${CLI_COVERAGE}%\", \"color\": \"${CLI_COLOR}\"}" > .github/badges/coverage-cli.json
          
      - name: Commit coverage data
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/badges/coverage.json .github/badges/coverage-cli.json || exit 0
          git diff --staged --quiet || git commit -m "Update coverage data [skip ci]"
          git push || true
        
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30
          
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const data = JSON.parse(fs.readFileSync('coverage-data.json', 'utf8'));
              const overall = data.overall;
              const cli = data.cli;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ðŸ“Š Test Coverage Report

            **Overall Coverage: ${overall.lines}%**
            - Lines: ${overall.lines}%
            - Functions: ${overall.functions}%
            - Branches: ${overall.branches}%
            - Statements: ${overall.statements}%

            **CLI Coverage: ${cli.lines}%**
            - Lines: ${cli.lines}%
            - Functions: ${cli.functions}%
            - Branches: ${cli.branches}%
            - Statements: ${cli.statements}%

            *UI coverage will be available once UI tests are properly configured.*`
              });
            } catch (error) {
              console.log('Could not parse coverage data:', error.message);
            }
