
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@layer components {
  .deck-stack {
    position: relative;
    filter: drop-shadow(0 10px 20px rgba(0, 0, 0, 0.3));
  }

  .deck-stack[data-card-count="0"] {
    opacity: 0.3;
  }

  .deck-stack[data-card-count]:not([data-card-count="0"])::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 0;
    border-left: 8px solid transparent;
    border-right: 8px solid transparent;
    border-top: 8px solid rgba(0, 0, 0, 0.2);
    z-index: -1;
  }
}

        {/* Deck of Cards */}
        <div className="absolute top-4 right-8">
          <div
            className="deck-stack"
            data-card-count={deckCount}
            style={
              {
                "--card-count": deckCount,
                "--stack-height": `clamp(8px, ${Math.max(deckCount * 0.5, 2)}px, 40px)`,
                "--stack-offset": `clamp(1px, ${Math.max(deckCount * 0.1, 0.5)}px, 3px)`,
              } as React.CSSProperties
            }
          >
            {Array.from({ length: Math.min(Math.max(Math.floor(deckCount / 5), 1), 8) }).map((_, i) => (
              <div
                key={i}
                className="absolute w-16 h-24 bg-blue-900 border border-blue-700 rounded-lg shadow-lg"
                style={{
                  transform: `translateY(-${i * (deckCount > 80 ? 3 : deckCount > 60 ? 2.5 : deckCount > 40 ? 2 : deckCount > 20 ? 1.5 : 1)}px) translateX(-${i * 0.5}px)`,
                  zIndex: 10 - i,
                }}
              >
                <div className="w-full h-full flex items-center justify-center">
                  <div className="w-8 h-12 border-2 border-blue-400 rounded opacity-50"></div>
                </div>
              </div>
            ))}
          </div>
          <div className="mt-32 text-center">
            <p className="text-white text-sm mb-2">Cards: {deckCount}</p>
            <div className="space-x-2">
              <Button onClick={drawCard} disabled={deckCount === 0} size="sm">
                Draw
              </Button>
              <Button onClick={resetDeck} variant="outline" size="sm">
                Reset
              </Button>
            </div>
          </div>
        </div>
        
        {/* Fan of Cards */}
        <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2">
          <div className="relative" style={{ width: "400px", height: "140px" }}>
            {cards.map((card, index) => {
              const { angle, translateX } = getCardPosition(index, cardCount)
              const translateY = Math.abs(angle) * 1.2 // Slight arc effect

              return (
                <div
                  key={card.id}
                  className="absolute w-20 h-28 bg-white border-2 border-gray-300 rounded-lg shadow-lg cursor-pointer hover:scale-110 transition-all duration-300 hover:-translate-y-6 hover:shadow-2xl"
                  style={{
                    transform: `translateX(${translateX}px) translateY(${translateY}px) rotate(${angle}deg)`,
                    transformOrigin: "center bottom",
                    left: "50%",
                    bottom: "0",
                    marginLeft: "-40px", // Half card width to center
                    zIndex: index + 1,
                  }}
                >
                  <div className="w-full h-full flex flex-col items-center justify-between p-2">
                    <div className={`text-lg font-bold ${card.color === "red" ? "text-red-600" : "text-black"}`}>
                      {card.value}
                    </div>
                    <div className={`text-3xl ${card.color === "red" ? "text-red-600" : "text-black"}`}>
                      {card.suit}
                    </div>
                    <div
                      className={`text-lg font-bold transform rotate-180 ${card.color === "red" ? "text-red-600" : "text-black"}`}
                    >
                      {card.value}
                    </div>
                  </div>
                </div>
              )
            })}
          </div>
        </div>
